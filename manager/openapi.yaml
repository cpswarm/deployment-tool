openapi: 3.0.0

info:
  description: The API of Deployment Tool (Manager)
  version: "0.6.0"
  title: Deployment Tool REST API
  contact:
    name: Source Code
    url: https://github.com/cpswarm/deployment-tool
  license:
    name: Apache 2.0
    url: 'https://github.com/cpswarm/deployment-tool/blob/master/LICENSE'
tags:
  - name: orders
    description: Managing deployment orders
  - name: targets
    description: Retrieving targets (devices)
  - name: logs
    description: Retrieving logs
paths:
  # ORDERS #####
  /orders:
    post:
      tags:
        - orders
      summary: adds an order
      requestBody:
        description: Order to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: 'invalid input, object invalid'
    get:
      tags:
        - orders
      summary: retrieves list of orders
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
  /orders/{id}:
    parameters:
      - in: path
        name: id
        description: id of the task
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - orders
      summary: retrieves an order
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: not found
  # TARGETS #####
  /targets:
    get:
      tags:
        - targets
      summary: retrieves list of targets
      parameters:
        - in: query
          name: tags
          schema:
            type: string
          description: Tags separated by commas
          example: dev,arm
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Target'

  /targets/{id}:
    parameters:
      - in: path
        name: id
        description: id of the target
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - targets
      summary: retrieves a target
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
        '404':
          description: not found
  # LOGS #####
  /logs:
    get:
      tags:
        - logs
      summary: retrieves list of logs
      parameters:
        - in: query
          name: target
          schema:
            type: string
          description: Target ID
        - in: query
          name: task
          schema:
            type: string
          description: Task ID
        - in: query
          name: stage
          schema:
            type: string
          description: Stage name
        - in: query
          name: command
          schema:
            type: string
          description: Command
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            enum: [time,target,task,stage,command]
          description: The field that items should be sorted by
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Log'

components:
  schemas:
    Order:
      title: Order
      type: object
      properties:
        id:
          type: string
          readOnly: true
        source:
          type: object
          description: Source files
          properties:
            zip:
              description: Base64 encoded zip of artifacts
              type: string
            order:
              description: Copy artifacts from a previous order
              type: string
            paths:
              description: Copy from a local directory on the server (for internal use)
              type: array
              items:
                type: string
        build:
          description: Build stages
          type: object
          properties:
            host:
              description: ID of the target hosting the build
              type: string
            commands:
              description: build shell commands
              type: array
              items:
                type: string
                example: "go build app"
            artifacts:
              description: list of paths to files and directories copied to manager after the build
              type: array
              items:
                type: string
                example: "app"
        deploy:
          description: Deployment stages
          type: object
          properties:
            install:
              type: object
              properties:
                commands:
                  description: installation commands executed sequentially on target devices
                  type: array
                  items:
                    type: string
                    example: "chmod +x app"
            run:
              type: object
              properties:
                commands:
                  description: commands for executing the applications on target devices
                  type: array
                  items:
                    type: string
                    example: "./app"
            target:
              description: Which target devices should receive the package
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                tags:
                  type: array
                  items:
                    type: string
                    example: [raspi3, gateway]
        debug:
          description: Whether the device should send all standard output (true) or just status info
          type: boolean
          default: false
        createdAt:
          type: integer
          format: int64
          readOnly: true
          example: 1546304461000

    Target:
      title: Target
      type: object
      properties:
        id:
          type: string
        tags:
          type: array
          items:
            type: string
        updatedAt:
          type: integer
          format: int64
          readOnly: true
          example: 1546304461000
    Log:
      title: Log
      type: object
      properties:
        time:
          type: integer
          format: int64
          example: 1546304461000
        target:
          type: string
        task:
          type: string
        stage:
          type: string
        command:
          type: string
        output:
          type: string
        error:
          type: boolean
          default: false
    List:
      title: List
      type: object
      properties:
        total:
          type: integer
          example: 10
        page:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 1
  parameters:
    page:
      in: query
      name: page
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: The page that should be retrieved
    perPage:
      in: query
      name: perPage
      required: false
      schema:
        type: integer
        minimum: 1
        default: 100
      description: The number of items in every page
    sortOrder:
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
        enum: [asc, desc]
      description: The sorting order